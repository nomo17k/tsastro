#!/usr/bin/env python2.6
"""
Add artificially generated object(s) to an input image.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
#from __future__ import unicode_literals
from optparse import OptionParser
from tempfile import NamedTemporaryFile
import warnings
import numpy as np
import pyfits as pf
from tsastro.morph2d import Gaussian, GIM2D


__version__ = '20111129'


# fits binary extension name
EXTNAME = 'ARTOBJ CATALOG'


class InvalidModelError(Exception): pass


def parsemodelstr(tokens):
    """
    Given tokens of strings (either from input arguments or a file),
    convert them to model instances.
    """
    # model id as in input and class object and number of parameters
    # (can use a list for flexible number of params; see GIM2D)
    modeltable = {'gauss': (Gaussian, (2, 10)),
                  'gim2d': (GIM2D, (9, 10, 11))}

    # array to store binary table info
    ids, xs, ys, ms, ps = [], [], [], [], []
    modelid = 1

    idx = 0  # current index for string to be parsed
    while 1:
        if idx >= len(tokens):
            break
        x, y, t = tokens[idx:idx + 3]
        if t not in modeltable:
            raise InvalidModelError('invalid input model format')
        m, npars = modeltable[t]

        # figure out the number of parameters to use
        npar = 0 
        for np in npars[0:]:
            idxnextmodel = idx + 3 + np + 2
            if (len(tokens) > idxnextmodel
                and tokens[idxnextmodel] in modeltable):
                npar = np
                break
            elif len(tokens) + 2 == idxnextmodel:
                npar = np
                break
        if npar == 0:
            raise InvalidModelError('invalid input model format')

        model = m(*[float(p) for p in tokens[idx + 3: idx + 3 + npar]])

        ids.append(modelid)
        xs.append(float(x))
        ys.append(float(y))
        ms.append(model.name)
        ps.append(model.parameters)

        modelid += 1

        # starting str index for next iteration
        idx += npar + 3

    # organize into a binary table
    cs = []
    a = cs.append
    a(pf.Column(name='id', format='J', array=ids))
    a(pf.Column(name='x', format='E', array=xs))
    a(pf.Column(name='y', format='E', array=ys))
    a(pf.Column(name='model', format='16A', array=ms))
    a(pf.Column(name='param', format='PE(16)', array=ps))
    models = pf.new_table(cs)
    models.header.update('EXTNAME', EXTNAME)

    return models


def addartobj(inim, outim, models, save=False, tmpfile=None, modelfile=None,
              imext=0):
    # get background image
    f = pf.open(inim, memmap=True)
    im = f[imext].data
    hdr = f[imext].header

    for i, model in enumerate(models.data):
        modclass = {'GIM2D': GIM2D, 'Gaussian': Gaussian}[model['model']]
        mod = modclass(*list(model['param']))
        mod.generate(model['x'], model['y'], im)
        # model.generate allocates arrays for individual objects, so
        # without freeing too much unnecessary memory may be used
        mod.release()

    # add info to header
    progver = ('addartobj [v%s] by Taro Sato' % __version__)
    models.header.update('AOBJINFO', progver)
    hdr.update('AOBJINFO', progver)
    hdr.update('AOBINPUT', inim, comment='input image used')

    # hdus for output fits file
    hdus = pf.HDUList([pf.PrimaryHDU(im, hdr)])
    if save:
        hdus.append(models)

    with warnings.catch_warnings():
        warnings.simplefilter('ignore')
        hdus.writeto(outim, clobber=True)

    if modelfile is not None:
        with warnings.catch_warnings():
            warnings.simplefilter('ignore')
            models.writeto(modelfile, clobber=True)

    # TODO: maybe there is a better way to keep the temporary file
    # alive till this point.
    if tmpfile is not None:
        tmpfile.close()


if __name__ == '__main__':
    usage = ("\n%prog [OPTIONS] INPUT OUTPUT"
             " [X Y MODEL PAR1 PAR2 ... [X Y MODEL PAR1 PAR2 ...]]"
             "\n%prog [OPTIONS] -n XSIZE YSIZE OUTPUT"
             " [X Y MODEL PAR1 PAR2 ... [X Y MODEL PAR1 PAR2 ...]]")
    p = OptionParser(usage=usage, version=__version__,
                     description=__doc__)
    p.add_option('-r', '--readfrom', type='string', default=None,
                 help='read models from a file')
    p.add_option('-n', '--new', type='int', nargs=2, default=None,
                 help='generate a new image of given shape')
    p.add_option('-s', '--save', action='store_true', default=False,
                 help='save models to a FITS extention')
    p.add_option('--saveto', default=None,
                 help='save models as a separate FITS table file')
    p.add_option('--tmpdir', default=None,
                 help='directory path for storing temporary files')

    opts, args = p.parse_args()

    # parse input argument list
    if opts.new is None:
        nargs = 2
        tmpfile = None
        inim = args[0]
    else:
        nargs = 1
        # generate a new fits image
        xsize, ysize = opts.new
        data = np.zeros((ysize, xsize), dtype='f')
        tmpfile = NamedTemporaryFile(dir=opts.tmpdir)
        pf.PrimaryHDU(data).writeto(tmpfile.name)
        inim = tmpfile.name

    # object models to be generated
    if opts.readfrom is None:
        # model and params are from cmd line
        if len(args) <= nargs:
            p.error('invalid arguments')
        models = parsemodelstr(args[nargs:])
    else:
        try:
            models = pf.open(opts.readfrom)[EXTNAME]
        except IOError:
            # assume ascii
            mstr = []
            with open(opts.readfrom) as f:
                for line in f:
                    if line.startswith('#'):
                        continue
                    mstr.extend(line.strip().split())
            models = parsemodelstr(mstr)

    # output image is always given at the last before model specs
    outim = args[nargs - 1]

    addartobj(inim, outim, models, save=opts.save, tmpfile=tmpfile,
              modelfile=opts.saveto)
