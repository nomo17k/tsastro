#!/usr/bin/env python2.6
"""
Send points defined in a white space delimited text file or a FITS
binary extension to DS9 as circular regions.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
#from __future__ import unicode_literals
from optparse import OptionParser
import numpy as np
import pyfits as pf
from ds9 import ds9 as DS9


__version__ = '20101225'


def xyonds9(xcol, ycol, filename, system='image', radius=None, radiusscale=1.,
            xpaid=None, comment='#', bounds=None, fits=None,
            labels=None, subsets=None,
            subsetbits=None, noadd=False, save=None, dump=False):
    if fits is not None:
        try:
            with pf.open(filename) as f:
                data = f[int(fits)].data
        except:
            raise RuntimeError('file does not seem to be in FITS format')
    else:
        # assume input catalog is ascii, convert to fits binary table

        # TODO: maybe add converters to save memory? might be hard to do...
        data = np.loadtxt(filename, comments=comment, unpack=True)
        cs = []
        for i, column in enumerate(data):
            cs.append(pf.Column(name=str(i + 1), format='D', array=column))
        data = pf.new_table(cs).data

    if bounds is not None:
        x1, x2, y1, y2 = bounds
        xs, ys = data.field(xcol), data.field(ycol)
        m = ((x1 <= xs) * (xs <= x2) * (y1 <= ys) * (ys <= y2))
        data = data[m]

    if subsets is not None:
        for c, lo, hi in subsets:
            dtype = data.field(c).dtype
            m = ((np.array(lo, dtype=dtype) <= data.field(c))
                 * (data.field(c) <= np.array(hi, dtype=dtype)))
            data = data[m]

    if subsetbits is not None:
        for c, bit, value in subsetbits:
            bit, value = int(bit), int(value)
            m = ((data.field(c) & bit) == value * bit)
            data = data[m]

    xs, ys = data.field(xcol), data.field(ycol)
    rs = (np.ones(xs.size) * 2. if radius is None
          else data.field(radius)) * radiusscale

    ds9 = DS9() if xpaid is None else DS9(xpaid)
    if labels is not None and not noadd:
        ds9.set('regions showtext yes')

    for o, x, y, r in zip(data, xs, ys, rs):
        rstr = (r'%f\"' if system in ['wcs', 'fk4', 'fk5', 'galactic', 'ecliptic']
                else r'%f') % r
        cmd = (r"%s;circle(%f %f %s) # " % (system, x, y, rstr))
        if labels:
            text = (' '.join([str(o.field(label)) for label in labels]))
            cmd += (r"text='%s'" % text.replace("'", "_"))

        if not noadd:
            ds9.set(r'regions command "%s"' % cmd)

        if dump:
            print('%f %f' % (x, y))

    if save:
        ds9.set('regions save %s' % save)


if __name__ == '__main__':
    usage = 'usage: %prog [OPTIONS] INPUT XCOL YCOL'
    p = OptionParser(usage=usage, description=__doc__,
                     version=__version__)
    p.add_option('--bounds', type='float', nargs=4, default=None,
                 help='coordinate bounds: x1 x2 y1 y2')
    p.add_option('--comment', default='#',
                 help='character indicating comment line')
    p.add_option('--coordsys', default='image',
                 help='coordinate system for regions')
    p.add_option('-d', '--dump', action='store_true', default=False,
                 help='dump x & y coordinates to stdout')
    p.add_option('--fits', type='int', default=None,
                 help='FITS binary extension')
    p.add_option('--label', type='string', action='append',
                 help='column name for the label to use for each point')
    p.add_option('-n', '--noadd', action='store_true', default=False,
                 help='do not show regions on DS9')
    p.add_option('--radius', type='string', default=None,
                 help='column for circular size')
    p.add_option('--radiusscale', type='float', default=1.,
                 help='multiplicative factor used for radius')
    p.add_option('--save', type='string', default=None,
                 help='save DS9 regions to given file')
    p.add_option('--subset', type='string', nargs=3, action='append',
                 help='a subset definition: column lo hi')
    p.add_option('--subsetbit', type='string', nargs=3, action='append',
                 help='a subset with bit set: column bit value')
    p.add_option('--xpaid', type='string', default=None,
                 help='XPA method ID for running DS9')

    opts, args = p.parse_args()
    if len(args) != 3:
        p.error('invalid arguments')

    fname = args[0]
    xcol = args[1]
    ycol = args[2]

    xyonds9(xcol, ycol, fname, system=opts.coordsys,
            radius=opts.radius, radiusscale=opts.radiusscale,
            xpaid=opts.xpaid, comment=opts.comment,
            bounds=opts.bounds, fits=opts.fits, labels=opts.label,
            subsets=opts.subset,
            subsetbits=opts.subsetbit,
            noadd=opts.noadd,
            save=opts.save,
            dump=opts.dump)
