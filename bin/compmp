#!/usr/bin/env python2.6
"""
Compute the midpoint between two coordinates.

The midpoint between the object at (RA2, DEC2) and the object at (RA1,
DEC1) is computed.  The coordinate values need to be in units of
degrees.

TODO:

Accept other types of coordinate values (e.g., sexagesimal, hours for
RA, etc.).
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
#from __future__ import unicode_literals
from optparse import OptionParser
from numpy import arctan2, cos, pi, sin, sqrt


__version__ = '20110221'


D2R = pi / 180.


def comppa(ra1, dec1, ra2, dec2):
    r1, d1 = ra1 * D2R, dec1 * D2R
    r2, d2 = ra2 * D2R, dec2 * D2R

    dr = r2 - r1

    bx = cos(d2) * cos(dr)
    by = cos(d2) * sin(dr)
    dm = arctan2(sin(d1) + sin(d2), sqrt((cos(d1) + bx)**2 + by**2))
    rm = r1 + arctan2(by, cos(d1) + bx)
    print('%f %f' % (rm / D2R, dm / D2R))


if __name__ == '__main__':
    usage = 'usage: %prog [OPTIONS] RA1 DEC1 RA2 DEC2'
    p = OptionParser(usage=usage, description=__doc__, version=__version__)

    opts, args = p.parse_args()

    if not (len(args) == 4):
        p.error('invalid arguments')

    ra1 = float(args[0])
    dec1 = float(args[1])
    ra2 = float(args[2])
    dec2 = float(args[3])

    comppa(ra1, dec1, ra2, dec2)
